<dependencies>
    <!-- Jackson XML -->
    <dependency>
        <groupId>com.fasterxml.jackson.dataformat</groupId>
        <artifactId>jackson-dataformat-xml</artifactId>
        <version>2.13.0</version> <!-- Replace with the latest version -->
    </dependency>

    <!-- Jackson Databind -->
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
        <version>2.13.0</version> <!-- Replace with the latest version -->
    </dependency>
</dependencies>


import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;

import java.io.File;
import java.io.IOException;

public class XmlToJsonConverter {

    public static void main(String[] args) {
        try {
            // Read XML data from a file
            File xmlFile = new File("input.xml");

            // Initialize XML mapper
            XmlMapper xmlMapper = new XmlMapper();

            // Convert XML to JSON
            JsonNode jsonNode = xmlMapper.readTree(xmlFile);

            // Create JSON string
            String jsonString = jsonNode.toString();

            // Output the JSON string
            System.out.println(jsonString);

            // You can also write the JSON to a file if needed
            // File jsonOutputFile = new File("output.json");
            // ObjectMapper jsonMapper = new ObjectMapper();
            // jsonMapper.writeValue(jsonOutputFile, jsonNode);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class Main {
    public static void main(String[] args) {
        String filePath = "path_to_your_json_file.json";

        try {
            // Read the JSON data from the file
            String jsonData = new String(Files.readAllBytes(Paths.get(filePath)));

            // Split the JSON data into individual JSON objects
            String[] jsonObjects = jsonData.split("(?<=\\})\\s*(?=\\{)");

            JSONArray outputArray = new JSONArray();

            // Process each JSON object
            for (String jsonObject : jsonObjects) {
                try {
                    JSONObject obj = new JSONObject(jsonObject);
                    JSONArray innerArray = obj.getJSONArray("Time_Off_Details_group");

                    for (int j = 0; j < innerArray.length(); j++) {
                        JSONObject innerObj = innerArray.getJSONObject(j);

                        JSONObject formattedObj = new JSONObject();
                        innerObj.keys().forEachRemaining(key -> {
                            try {
                                formattedObj.put(key, innerObj.get(key));
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        });

                        outputArray.put(formattedObj);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }

            System.out.println(outputArray.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
}

