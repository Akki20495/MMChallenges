To use an external JAR file as a dependency in a Jenkins job, you can follow these steps:

1. **Install and Configure Jenkins:** If you haven't already, install Jenkins on your server and set it up according to your requirements.

2. **Create a Jenkins Job:**
   - Go to your Jenkins dashboard.
   - Click on "New Item" to create a new job (Freestyle project, Pipeline, etc.) based on your requirements.

3. **Configure the Job:**
   - In the job configuration, look for the "Build" section or the appropriate section where you can add build steps.
   - Depending on your use case, you can use different build steps. To use an external JAR as a dependency, you can add a "Execute Shell" (for Unix-like systems) or "Execute Windows batch command" (for Windows) build step.

4. **Copy the External JAR to the Workspace:**
   - In your build step script, you can use commands to copy the external JAR to the workspace directory of your Jenkins job. For example, you can use `cp` or `copy` commands.
   - Here's an example for Unix-like systems:
     ```bash
     cp /path/to/your/external.jar $WORKSPACE/
     ```

5. **Use the JAR as a Dependency:** Now that the JAR is in your job's workspace, you can reference it in your build process. You might use it in your build commands, for example, to run a Java application with the JAR as a dependency.

6. **Save and Build:** Save the job configuration, and trigger a build to use the external JAR as a dependency.

This approach assumes you want to use the external JAR within the context of the Jenkins job. If you need the JAR as a dependency for your build and don't want to copy it to the workspace, you can consider using a build tool like Apache Maven or Gradle, which can handle dependency management more systematically. Jenkins also has plugins for these build tools that can simplify the process.